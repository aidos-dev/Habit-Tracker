// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/aidos-dev/habit-tracker/backend/internal/models"
	jwt "github.com/golang-jwt/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// FindTgUser mocks base method.
func (m *MockAuthorization) FindTgUser(tgUsername string) (models.GetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTgUser", tgUsername)
	ret0, _ := ret[0].(models.GetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTgUser indicates an expected call of FindTgUser.
func (mr *MockAuthorizationMockRecorder) FindTgUser(tgUsername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTgUser", reflect.TypeOf((*MockAuthorization)(nil).FindTgUser), tgUsername)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockAdminRole is a mock of AdminRole interface.
type MockAdminRole struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRoleMockRecorder
}

// MockAdminRoleMockRecorder is the mock recorder for MockAdminRole.
type MockAdminRoleMockRecorder struct {
	mock *MockAdminRole
}

// NewMockAdminRole creates a new mock instance.
func NewMockAdminRole(ctrl *gomock.Controller) *MockAdminRole {
	mock := &MockAdminRole{ctrl: ctrl}
	mock.recorder = &MockAdminRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRole) EXPECT() *MockAdminRoleMockRecorder {
	return m.recorder
}

// AssignRole mocks base method.
func (m *MockAdminRole) AssignRole(userId int, role models.UpdateRoleInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRole", userId, role)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignRole indicates an expected call of AssignRole.
func (mr *MockAdminRoleMockRecorder) AssignRole(userId, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRole", reflect.TypeOf((*MockAdminRole)(nil).AssignRole), userId, role)
}

// MockAdminReward is a mock of AdminReward interface.
type MockAdminReward struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRewardMockRecorder
}

// MockAdminRewardMockRecorder is the mock recorder for MockAdminReward.
type MockAdminRewardMockRecorder struct {
	mock *MockAdminReward
}

// NewMockAdminReward creates a new mock instance.
func NewMockAdminReward(ctrl *gomock.Controller) *MockAdminReward {
	mock := &MockAdminReward{ctrl: ctrl}
	mock.recorder = &MockAdminRewardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminReward) EXPECT() *MockAdminRewardMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAdminReward) Create(reward models.Reward) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", reward)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAdminRewardMockRecorder) Create(reward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdminReward)(nil).Create), reward)
}

// Delete mocks base method.
func (m *MockAdminReward) Delete(rewardId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", rewardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAdminRewardMockRecorder) Delete(rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAdminReward)(nil).Delete), rewardId)
}

// GetAllRewards mocks base method.
func (m *MockAdminReward) GetAllRewards() ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRewards")
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRewards indicates an expected call of GetAllRewards.
func (mr *MockAdminRewardMockRecorder) GetAllRewards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRewards", reflect.TypeOf((*MockAdminReward)(nil).GetAllRewards))
}

// GetById mocks base method.
func (m *MockAdminReward) GetById(rewardId int) (models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", rewardId)
	ret0, _ := ret[0].(models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAdminRewardMockRecorder) GetById(rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAdminReward)(nil).GetById), rewardId)
}

// UpdateReward mocks base method.
func (m *MockAdminReward) UpdateReward(rewardId int, input models.UpdateRewardInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReward", rewardId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReward indicates an expected call of UpdateReward.
func (mr *MockAdminRewardMockRecorder) UpdateReward(rewardId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReward", reflect.TypeOf((*MockAdminReward)(nil).UpdateReward), rewardId, input)
}

// MockAdminUserReward is a mock of AdminUserReward interface.
type MockAdminUserReward struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUserRewardMockRecorder
}

// MockAdminUserRewardMockRecorder is the mock recorder for MockAdminUserReward.
type MockAdminUserRewardMockRecorder struct {
	mock *MockAdminUserReward
}

// NewMockAdminUserReward creates a new mock instance.
func NewMockAdminUserReward(ctrl *gomock.Controller) *MockAdminUserReward {
	mock := &MockAdminUserReward{ctrl: ctrl}
	mock.recorder = &MockAdminUserRewardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUserReward) EXPECT() *MockAdminUserRewardMockRecorder {
	return m.recorder
}

// AssignReward mocks base method.
func (m *MockAdminUserReward) AssignReward(userId, habitId, rewardId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignReward", userId, habitId, rewardId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignReward indicates an expected call of AssignReward.
func (mr *MockAdminUserRewardMockRecorder) AssignReward(userId, habitId, rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignReward", reflect.TypeOf((*MockAdminUserReward)(nil).AssignReward), userId, habitId, rewardId)
}

// GetAllPersonalRewards mocks base method.
func (m *MockAdminUserReward) GetAllPersonalRewards(userId int) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPersonalRewards", userId)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPersonalRewards indicates an expected call of GetAllPersonalRewards.
func (mr *MockAdminUserRewardMockRecorder) GetAllPersonalRewards(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersonalRewards", reflect.TypeOf((*MockAdminUserReward)(nil).GetAllPersonalRewards), userId)
}

// GetPersonalRewardsByHabitId mocks base method.
func (m *MockAdminUserReward) GetPersonalRewardsByHabitId(userId, habitId int) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalRewardsByHabitId", userId, habitId)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalRewardsByHabitId indicates an expected call of GetPersonalRewardsByHabitId.
func (mr *MockAdminUserRewardMockRecorder) GetPersonalRewardsByHabitId(userId, habitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalRewardsByHabitId", reflect.TypeOf((*MockAdminUserReward)(nil).GetPersonalRewardsByHabitId), userId, habitId)
}

// RemoveFromUser mocks base method.
func (m *MockAdminUserReward) RemoveFromUser(userId, habitId, rewardId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromUser", userId, habitId, rewardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromUser indicates an expected call of RemoveFromUser.
func (mr *MockAdminUserRewardMockRecorder) RemoveFromUser(userId, habitId, rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromUser", reflect.TypeOf((*MockAdminUserReward)(nil).RemoveFromUser), userId, habitId, rewardId)
}

// UpdateUserReward mocks base method.
func (m *MockAdminUserReward) UpdateUserReward(userId, habitId, rewardId int, input models.UpdateUserRewardInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserReward", userId, habitId, rewardId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserReward indicates an expected call of UpdateUserReward.
func (mr *MockAdminUserRewardMockRecorder) UpdateUserReward(userId, habitId, rewardId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserReward", reflect.TypeOf((*MockAdminUserReward)(nil).UpdateUserReward), userId, habitId, rewardId, input)
}

// MockAdmin is a mock of Admin interface.
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin.
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance.
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// AssignReward mocks base method.
func (m *MockAdmin) AssignReward(userId, habitId, rewardId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignReward", userId, habitId, rewardId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignReward indicates an expected call of AssignReward.
func (mr *MockAdminMockRecorder) AssignReward(userId, habitId, rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignReward", reflect.TypeOf((*MockAdmin)(nil).AssignReward), userId, habitId, rewardId)
}

// AssignRole mocks base method.
func (m *MockAdmin) AssignRole(userId int, role models.UpdateRoleInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRole", userId, role)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignRole indicates an expected call of AssignRole.
func (mr *MockAdminMockRecorder) AssignRole(userId, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRole", reflect.TypeOf((*MockAdmin)(nil).AssignRole), userId, role)
}

// Create mocks base method.
func (m *MockAdmin) Create(reward models.Reward) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", reward)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAdminMockRecorder) Create(reward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdmin)(nil).Create), reward)
}

// Delete mocks base method.
func (m *MockAdmin) Delete(rewardId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", rewardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAdminMockRecorder) Delete(rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAdmin)(nil).Delete), rewardId)
}

// GetAllPersonalRewards mocks base method.
func (m *MockAdmin) GetAllPersonalRewards(userId int) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPersonalRewards", userId)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPersonalRewards indicates an expected call of GetAllPersonalRewards.
func (mr *MockAdminMockRecorder) GetAllPersonalRewards(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersonalRewards", reflect.TypeOf((*MockAdmin)(nil).GetAllPersonalRewards), userId)
}

// GetAllRewards mocks base method.
func (m *MockAdmin) GetAllRewards() ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRewards")
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRewards indicates an expected call of GetAllRewards.
func (mr *MockAdminMockRecorder) GetAllRewards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRewards", reflect.TypeOf((*MockAdmin)(nil).GetAllRewards))
}

// GetById mocks base method.
func (m *MockAdmin) GetById(rewardId int) (models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", rewardId)
	ret0, _ := ret[0].(models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAdminMockRecorder) GetById(rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAdmin)(nil).GetById), rewardId)
}

// GetPersonalRewardsByHabitId mocks base method.
func (m *MockAdmin) GetPersonalRewardsByHabitId(userId, habitId int) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalRewardsByHabitId", userId, habitId)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalRewardsByHabitId indicates an expected call of GetPersonalRewardsByHabitId.
func (mr *MockAdminMockRecorder) GetPersonalRewardsByHabitId(userId, habitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalRewardsByHabitId", reflect.TypeOf((*MockAdmin)(nil).GetPersonalRewardsByHabitId), userId, habitId)
}

// RemoveFromUser mocks base method.
func (m *MockAdmin) RemoveFromUser(userId, habitId, rewardId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromUser", userId, habitId, rewardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromUser indicates an expected call of RemoveFromUser.
func (mr *MockAdminMockRecorder) RemoveFromUser(userId, habitId, rewardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromUser", reflect.TypeOf((*MockAdmin)(nil).RemoveFromUser), userId, habitId, rewardId)
}

// UpdateReward mocks base method.
func (m *MockAdmin) UpdateReward(rewardId int, input models.UpdateRewardInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReward", rewardId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReward indicates an expected call of UpdateReward.
func (mr *MockAdminMockRecorder) UpdateReward(rewardId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReward", reflect.TypeOf((*MockAdmin)(nil).UpdateReward), rewardId, input)
}

// UpdateUserReward mocks base method.
func (m *MockAdmin) UpdateUserReward(userId, habitId, rewardId int, input models.UpdateUserRewardInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserReward", userId, habitId, rewardId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserReward indicates an expected call of UpdateUserReward.
func (mr *MockAdminMockRecorder) UpdateUserReward(userId, habitId, rewardId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserReward", reflect.TypeOf((*MockAdmin)(nil).UpdateUserReward), userId, habitId, rewardId, input)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), userId)
}

// GetAllUsers mocks base method.
func (m *MockUser) GetAllUsers() ([]models.GetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]models.GetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUser)(nil).GetAllUsers))
}

// GetUser mocks base method.
func (m *MockUser) GetUser(username, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserMockRecorder) GetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUser)(nil).GetUser), username, password)
}

// GetUserById mocks base method.
func (m *MockUser) GetUserById(userId int) (models.GetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(models.GetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUser)(nil).GetUserById), userId)
}

// GetUserByTgUsername mocks base method.
func (m *MockUser) GetUserByTgUsername(TGusername string) (models.GetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTgUsername", TGusername)
	ret0, _ := ret[0].(models.GetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTgUsername indicates an expected call of GetUserByTgUsername.
func (mr *MockUserMockRecorder) GetUserByTgUsername(TGusername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTgUsername", reflect.TypeOf((*MockUser)(nil).GetUserByTgUsername), TGusername)
}

// MockHabit is a mock of Habit interface.
type MockHabit struct {
	ctrl     *gomock.Controller
	recorder *MockHabitMockRecorder
}

// MockHabitMockRecorder is the mock recorder for MockHabit.
type MockHabitMockRecorder struct {
	mock *MockHabit
}

// NewMockHabit creates a new mock instance.
func NewMockHabit(ctrl *gomock.Controller) *MockHabit {
	mock := &MockHabit{ctrl: ctrl}
	mock.recorder = &MockHabitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabit) EXPECT() *MockHabitMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHabit) Create(userId int, habit models.Habit) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, habit)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHabitMockRecorder) Create(userId, habit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHabit)(nil).Create), userId, habit)
}

// Delete mocks base method.
func (m *MockHabit) Delete(userId, habitId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, habitId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHabitMockRecorder) Delete(userId, habitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHabit)(nil).Delete), userId, habitId)
}

// GetAll mocks base method.
func (m *MockHabit) GetAll(userId int) ([]models.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]models.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockHabitMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHabit)(nil).GetAll), userId)
}

// GetById mocks base method.
func (m *MockHabit) GetById(userId, habitId int) (models.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, habitId)
	ret0, _ := ret[0].(models.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockHabitMockRecorder) GetById(userId, habitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockHabit)(nil).GetById), userId, habitId)
}

// Update mocks base method.
func (m *MockHabit) Update(userId, habitId int, input models.UpdateHabitInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, habitId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHabitMockRecorder) Update(userId, habitId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHabit)(nil).Update), userId, habitId, input)
}

// MockHabitTracker is a mock of HabitTracker interface.
type MockHabitTracker struct {
	ctrl     *gomock.Controller
	recorder *MockHabitTrackerMockRecorder
}

// MockHabitTrackerMockRecorder is the mock recorder for MockHabitTracker.
type MockHabitTrackerMockRecorder struct {
	mock *MockHabitTracker
}

// NewMockHabitTracker creates a new mock instance.
func NewMockHabitTracker(ctrl *gomock.Controller) *MockHabitTracker {
	mock := &MockHabitTracker{ctrl: ctrl}
	mock.recorder = &MockHabitTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitTracker) EXPECT() *MockHabitTrackerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockHabitTracker) GetAll(userId int) ([]models.HabitTracker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]models.HabitTracker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockHabitTrackerMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHabitTracker)(nil).GetAll), userId)
}

// GetById mocks base method.
func (m *MockHabitTracker) GetById(userId, habitId int) (models.HabitTracker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, habitId)
	ret0, _ := ret[0].(models.HabitTracker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockHabitTrackerMockRecorder) GetById(userId, habitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockHabitTracker)(nil).GetById), userId, habitId)
}

// Update mocks base method.
func (m *MockHabitTracker) Update(userId, habitId int, input models.UpdateTrackerInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, habitId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHabitTrackerMockRecorder) Update(userId, habitId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHabitTracker)(nil).Update), userId, habitId, input)
}

// MockReward is a mock of Reward interface.
type MockReward struct {
	ctrl     *gomock.Controller
	recorder *MockRewardMockRecorder
}

// MockRewardMockRecorder is the mock recorder for MockReward.
type MockRewardMockRecorder struct {
	mock *MockReward
}

// NewMockReward creates a new mock instance.
func NewMockReward(ctrl *gomock.Controller) *MockReward {
	mock := &MockReward{ctrl: ctrl}
	mock.recorder = &MockRewardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReward) EXPECT() *MockRewardMockRecorder {
	return m.recorder
}

// GetAllPersonalRewards mocks base method.
func (m *MockReward) GetAllPersonalRewards(userId int) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPersonalRewards", userId)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPersonalRewards indicates an expected call of GetAllPersonalRewards.
func (mr *MockRewardMockRecorder) GetAllPersonalRewards(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersonalRewards", reflect.TypeOf((*MockReward)(nil).GetAllPersonalRewards), userId)
}

// GetPersonalRewardsByHabitId mocks base method.
func (m *MockReward) GetPersonalRewardsByHabitId(userId, habitId int) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalRewardsByHabitId", userId, habitId)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalRewardsByHabitId indicates an expected call of GetPersonalRewardsByHabitId.
func (mr *MockRewardMockRecorder) GetPersonalRewardsByHabitId(userId, habitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalRewardsByHabitId", reflect.TypeOf((*MockReward)(nil).GetPersonalRewardsByHabitId), userId, habitId)
}
